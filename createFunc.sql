SET SCHEMA FN71839;

--SCALAR FUNCTION
--THE IDEA OF THIS FUNCTION IS TO CALCULATE THE DAILY TURNOVER EACH DAY FOR THE CURRENT DATE
CREATE FUNCTION DAILY_TURNOVER(CURRDATE DATE)
RETURNS FLOAT
SPECIFIC DAILY_TURNOVER
RETURN
    SELECT SUM(ORDER_PRICE)
    FROM ORDERS
    WHERE ORDER_DATE = CURRDATE;

--function call
VALUES FN71839.DAILY_TURNOVER(CURRENT_DATE );
VALUES FN71839.DAILY_TURNOVER('2020-02-25' );

--TABLE FUNCTION
--returns the type of payment for each client on the current date
CREATE FUNCTION PAYMENT_TYPE_CLIENTS(CURRDATE DATE)
RETURNS TABLE
(
    CLIENT_NAME VARCHAR(50),
    PAYMENT CHAR(7)
)
SPECIFIC PAYMENT_TYPE_CLIENTS
RETURN
    SELECT CLIENT_NAME, PAYMENT
    FROM CLIENTS CL, ORDERS O
    WHERE (O.CLIENT_TELEPHONE LIKE CL.TELEPHONE_NUMBER)
    AND (ORDER_DATE = CURRDATE);

--function call
SELECT *
FROM TABLE(FN71839.PAYMENT_TYPE_CLIENTS('2020-02-25')) T;

--returns the searched item and its price
CREATE FUNCTION SEARCH_FOR_MEAL(S_NAME VARCHAR(60))
RETURNS TABLE (NAME VARCHAR(60) , PRICE DOUBLE )
BEGIN ATOMIC
    DECLARE S_ITEM VARCHAR(60);
    SET S_ITEM = ('%' || S_NAME || '%');
RETURN SELECT I.NAME , I.PRICE
              FROM ITEMS I
              WHERE I.NAME LIKE S_ITEM;
end;

--function call
SELECT *
FROM TABLE(FN71839.SEARCH_FOR_MEAL('Пица')) S;

--returns a branch's monthly turnover
CREATE FUNCTION GET_ALL_BRANCHES(branch VARCHAR(20))
RETURNS TABLE
(
    BRANCH_NAME varchar(20),
    TURNOVER DOUBLE
)
RETURN
    SELECT b.BRANCH_NAME, b.MONTHLY_TURNOVER
        FROM BRANCHES b
        WHERE BRANCH_NAME != branch;
--call table function
SELECT *
FROM TABLE(FN71839.GET_ALL_BRANCHES('brnch')) T;


--returns the whole menu
CREATE FUNCTION ITEMS_INFO(I_PRICE DOUBLE)
RETURNS TABLE (NAME VARCHAR(60) , PRICE DOUBLE)
RETURN
    SELECT I.NAME , I.PRICE
    FROM ITEMS I
    WHERE I.PRICE < I_PRICE;

SELECT *
FROM TABLE(FN71839.ITEMS_INFO(10))T;